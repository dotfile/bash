#!/bin/bash
# vim: set filetype=bash :

# ================================================= #
#                                                   #
#            SSH SESSION MANAGEMENT                 #
#                                                   #
# ================================================= #

# Auto SSH-ADD for commands
# Brilliant solution: http://askubuntu.com/a/27298
check-ssh-add() {
	# XXX: My system returns 'awesome'
	#if [ "$DESKTOP_SESSION" == "" ]; then
	#fi
	if [[ `ssh-add -l` != *id_?sa* ]]; then 
		echo -n '[ssh-add] '
		ssh-add -t 5h  ## 5 hour ssh-agent expiration
	fi
}

# Check that we're ssh-added for git push.
git() {
	if [ "$1" == "push" ]; then
		check-ssh-add
	fi
	/usr/bin/git "$@"
}

rsync() {
	cmd=$@
	search="ssh"
	if [[ "$cmd" == *"$search"* ]]; then
		check-ssh-add
	fi
	/usr/bin/rsync "$@"
}

ssh() {
	check-ssh-add
	/usr/bin/ssh "$@"
}

# ================================================= #
#                                                   #
#            Git / Github Simplifications           #
#                                                   #
# ================================================= #

alias cbranch='git rev-parse --abbrev-ref HEAD'

# Shorthand/Defaults for git push
git-push() {
	dest=''
	ref=''
	if [ $# -eq 0 ]; then
		dest='github'
		ref=$(cbranch)
	elif [ $# -eq 1 ]; then
		dest=$1
		ref=$(cbranch)
	else
		dest=$1
		ref=$2
	fi
	echo "> Pushing to $dest the ref $ref"
	git push $dest $ref
}

# Shorthand/Defaults for git pull
git-pull() {
	dest=''
	ref=''
	if [ $# -eq 0 ]; then
		dest='github'
		ref='master'
	elif [ $# -eq 1 ]; then
		dest=$1
		ref='master'
	else
		dest=$1
		ref=$2
	fi
	echo "> Pulling from $dest the ref $ref"
	git pull $dest $ref
}

push() {
	ref=''
	if [ $# -eq 0 ]; then
		ref=$(cbranch)
	else
		ref=$1
	fi
	git-push github $ref || git-push origin $ref || git-push private $ref
}


pull() {
	ref=''
	if [ $# -eq 0 ]; then
		ref='master'
	else
		ref=$1
	fi
	git-pull github $ref || git-pull origin $ref || git-pull private $ref
}


# ================================================= #
#                                                   #
#                   MISCELLANEOUS                   #
#                                                   #
# ================================================= #

# Re-source bashrc configs.
function source() {
	file="${HOME}/.bashrc"
	if [ $# -lt 1 ]; then
		echo "[source] no argument; sourcing $file"
		builtin source "$file"
		return
	fi
	builtin source "$@"
}

# Change to the root directory of a git project.
# TODO(2014-12-31): Include script in bash dotfiles repository.
function cd-base() {
	PROJ_BASEDIR=$(find_project_basedir)
	RET=$?
	if [ $RET -ne 0 ]; then
		return
	fi
	if [ -n "$1" ]; then
		PROJ_BASEDIR="$PROJ_BASEDIR/$1"
	fi
	cd "$PROJ_BASEDIR"
}

# Print the shell definition of an alias or function.
# Also prints filename and line number for function declarations.
function get-definition() {
  if [ $# -lt 1 ]; then
    return 1 # Otherwise declare dumps all defined names.
  fi

  # Filename and line number (functions)
  shopt -s extdebug
  declare -F "$@"
  shopt -u extdebug

  # Definition
  result=$(type -a "$@" 2> /dev/null)
  [ $? = 0 ] && echo "$result"
  return $?
}

# Alias `which` so that it can report on bash functions and aliases.
# TODO(2014-12-31): mimic the binary, which iterates over all input symbols.
function which() {
  result=$(command which "$@")
  if [ $result ]; then
    echo "$result"
    return $?
  else
    result=$(get-definition "$@")
    echo "$result"
    return $?
  fi
}

# Add an "alert" alias for long running commands.
# Taken from Ubuntu 12.04's default .bashrc file.
# Example Usage: sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# ================================================= #
#                                                   #
#                   CONFIGURATIONS                  #
#                                                   #
# ================================================= #


# Molokai colorscheme for dircolors 
eval $(dircolors -b ~/.config/bash/dircolors.molokai)

# Load Xdefaults
# I've started doing this on shell spawn, because I can't seem 
# to get the login script to work correctly on multiple systems.
# TODO: Perhaps call this as a script from AwesomeWM... it doesn't
# strictly _have_ to be part of a shell init script. Think outside
# the box.
MY_CONFDIR=$HOME'/.config/bash'
MY_HOSTNAME=`uname -n` # $HOSTNAME isn't populated by this time !

xrdb -load "$MY_CONFDIR/Xdefaults"

case $MY_HOSTNAME in
	'x120e')	xrdb -merge "$MY_CONFDIR/Xdefaults.x120e";;
	'vaiop')	xrdb -merge "$MY_CONFDIR/Xdefaults.vaiop";;
	*)			echo "Invalid Hostname";;
esac

# Report branch in PS1
source $MY_CONFDIR/scripts/git-prompt.sh

# Set the PS1 prompt to echo useful (and color-coded) info 
# Note: Colors match molokai theme!
# Codes: http://misc.flogisoft.com/bash/tip_colors_and_formatting

function fgcolor()
{
	local color=$1
	local bold=$2
	if [ "$bold" == "bold" ]; then
		echo '\e[1;38;5;'"${color}m"
	else
		echo '\e[0;38;5;'"${color}m"
	fi
}

GRAY=245
BLUE=37
WHITE=255
PINK=198

GRAY=$(fgcolor $GRAY)
BLUE=$(fgcolor $BLUE bold)
WHITE=$(fgcolor $WHITE)
PINK=$(fgcolor $PINK)

GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_STATESEPARATOR=''

export PS1="\[$GRAY\]\u@\h:${debian_chroot:+($debian_chroot)}\[$BLUE\]\w\[$GRAY\]\$(__git_ps1 '(\[$PINK\]%s\[$GRAY\])')\[$GRAY\]\$\[$WHITE\] "

# Custom scripts
PATH=/home/brandon/bin2:$PATH


